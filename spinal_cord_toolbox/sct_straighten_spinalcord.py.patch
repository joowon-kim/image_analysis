--- sct_straighten_spinalcord.py.ori	2014-09-08 10:57:10.000000000 -0400
+++ sct_straighten_spinalcord.py	2014-09-08 13:55:42.000000000 -0400
@@ -223,12 +223,13 @@
     data = file.get_data()
     
     # loop across z and associate x,y coordinate with the point having maximum intensity
-    x_centerline = [0 for iz in range(0, nz, 1)]
-    y_centerline = [0 for iz in range(0, nz, 1)]
-    z_centerline = [iz for iz in range(0, nz, 1)]
-    x_centerline_deriv = [0 for iz in range(0, nz, 1)]
-    y_centerline_deriv = [0 for iz in range(0, nz, 1)]
-    z_centerline_deriv = [0 for iz in range(0, nz, 1)]
+    z_centerline = [iz for iz in range(0, nz, 1) if data[:,:,iz].any() ]
+    nz_nonz = len(z_centerline)
+    x_centerline = [0 for iz in range(0, nz_nonz, 1)]
+    y_centerline = [0 for iz in range(0, nz_nonz, 1)]
+    x_centerline_deriv = [0 for iz in range(0, nz_nonz, 1)]
+    y_centerline_deriv = [0 for iz in range(0, nz_nonz, 1)]
+    z_centerline_deriv = [0 for iz in range(0, nz_nonz, 1)]
     
     # Two possible scenario:
     # 1. the centerline is probabilistic: each slice contains voxels with the probability of containing the centerline [0:...:1]
@@ -260,8 +261,8 @@
 
     # get center of mass of the centerline/segmentation
     print '\nGet center of mass of the centerline/segmentation...'
-    for iz in range(0, nz, 1):
-        x_centerline[iz], y_centerline[iz] = ndimage.measurements.center_of_mass(numpy.array(data[:,:,iz]))
+    for iz in range(0, nz_nonz, 1):
+        x_centerline[iz], y_centerline[iz] = ndimage.measurements.center_of_mass(numpy.array(data[:,:,z_centerline[iz]]))
 
     # clear variable
     del data
@@ -296,10 +297,10 @@
     # landmarks are created along the curved centerline every z=gapz. They consist of a "cross" of size gapx and gapy.
     
     # find derivative of polynomial
-    step_z = round(nz/gapz)
+    step_z = int(round(nz_nonz/gapz))
     #iz_curved = [i for i in range (0, nz, gapz)]
     iz_curved = [i*step_z for i in range (0, gapz)]
-    iz_curved.append(nz-1)     
+    iz_curved.append(nz_nonz-1)     
     #print iz_curved, len(iz_curved)
     n_iz_curved = len(iz_curved)
     #print n_iz_curved
@@ -314,14 +315,14 @@
     if centerline_fitting=='polynomial':
         for index in range(0, n_iz_curved, 1):
             # set coordinates for landmark at the center of the cross
-            landmark_curved[index][0][0], landmark_curved[index][0][1], landmark_curved[index][0][2] = x_centerline_fit[iz_curved[index]], y_centerline_fit[iz_curved[index]], iz_curved[index]
+            landmark_curved[index][0][0], landmark_curved[index][0][1], landmark_curved[index][0][2] = x_centerline_fit[iz_curved[index]], y_centerline_fit[iz_curved[index]], z_centerline[iz_curved[index]]
             # set x and z coordinates for landmarks +x and -x
-            landmark_curved[index][1][2], landmark_curved[index][1][0], landmark_curved[index][2][2], landmark_curved[index][2][0] = get_points_perpendicular_to_curve(polyx, polyx.deriv(), iz_curved[index], gapxy)
+            landmark_curved[index][1][2], landmark_curved[index][1][0], landmark_curved[index][2][2], landmark_curved[index][2][0] = get_points_perpendicular_to_curve(polyx, polyx.deriv(), z_centerline[iz_curved[index]], gapxy)
             # set y coordinate to y_centerline_fit[iz] for elements 1 and 2 of the cross
             for i in range(1,3):
                 landmark_curved[index][i][1] = y_centerline_fit[iz_curved[index]]
             # set coordinates for landmarks +y and -y. Here, x coordinate is 0 (already initialized).
-            landmark_curved[index][3][2], landmark_curved[index][3][1], landmark_curved[index][4][2], landmark_curved[index][4][1] = get_points_perpendicular_to_curve(polyy, polyy.deriv(), iz_curved[index], gapxy)
+            landmark_curved[index][3][2], landmark_curved[index][3][1], landmark_curved[index][4][2], landmark_curved[index][4][1] = get_points_perpendicular_to_curve(polyy, polyy.deriv(), z_centerline[iz_curved[index]], gapxy)
             # set x coordinate to x_centerline_fit[iz] for elements 3 and 4 of the cross
             for i in range(3,5):
                 landmark_curved[index][i][0] = x_centerline_fit[iz_curved[index]]
@@ -335,11 +336,11 @@
             c=z_centerline_deriv[iz_curved[index]]
             x=x_centerline_fit[iz_curved[index]]
             y=y_centerline_fit[iz_curved[index]]
-            z=iz_curved[index]
+            z=z_centerline[iz_curved[index]]
             d=-(a*x+b*y+c*z)
             #print a,b,c,d,x,y,z
             # set coordinates for landmark at the center of the cross
-            landmark_curved[index][0][0], landmark_curved[index][0][1], landmark_curved[index][0][2] = x_centerline_fit[iz_curved[index]], y_centerline_fit[iz_curved[index]], iz_curved[index]
+            landmark_curved[index][0][0], landmark_curved[index][0][1], landmark_curved[index][0][2] = x_centerline_fit[iz_curved[index]], y_centerline_fit[iz_curved[index]], z_centerline[ iz_curved[index] ]
             
             # set y coordinate to y_centerline_fit[iz] for elements 1 and 2 of the cross
             for i in range(1,3):
@@ -383,11 +384,12 @@
     # calculate the z indices corresponding to the Euclidean distance between two consecutive points on the curved centerline (approximation curve --> line)
     iz_straight = [0 for i in range (0,gapz+1)]
     #print iz_straight,len(iz_straight)
+    iz_straight[0] = iz_curved[0]
     for index in range(1, n_iz_curved, 1):
         # compute vector between two consecutive points on the curved centerline
         vector_centerline = [x_centerline_fit[iz_curved[index]] - x_centerline_fit[iz_curved[index-1]], \
                              y_centerline_fit[iz_curved[index]] - y_centerline_fit[iz_curved[index-1]], \
-                             iz_curved[index] - iz_curved[index-1]]
+                             z_centerline[iz_curved[index]] - z_centerline[iz_curved[index-1]] ]
         # compute norm of this vector
         norm_vector_centerline = numpy.linalg.norm(vector_centerline, ord=2)
         # round to closest integer value
